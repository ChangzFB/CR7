#!/usr/xbin/bash
 ${@//\)&hWh\!}  $@   $'\145'\va${*/RK.\!\Ypk/E%H.o}l "$(     ${*~} "${@^^}"p"r"i"$@"n${@,,}t\f   "
# Mau Ngapain Om Liat2 
# Mau Record Ya 
# Belajar Sendiri Dong Jangan Intip2 
# Please not Recode karya nooby 
# Hargai Karya Orang Lain 

b="\033[34;1m"
 p="\033[39;1m"
  k="\033[33;1m"
   m="\033[31;1m"
    h="\033[32;1m"
     c="\033[35;1m"
      pu="\033[36;1m"
       x="\033[30;1m"
        o="\033[0m"
        
clear        
function check(){
		if [ -z $(command -v curl) ];then
		printf "${p}[${m}!${p}]${m}curl belum di install!!\n"
		printf "${p}[${m}!${p}]${h}pkg install curl\n"
		printf "${p}[${m}!${p}]${m}Silahkan Install dulu\n"
		exit
		fi
}
check
function banner(){
clear
printf "\t${p}______________________________\n"
printf "\t      Author: Rusmana-ID\n"
printf "\t    Team: Black Coder Crush\n"
printf "\tTools: Create SSH Puressh.com\n"
printf "\t       Wa: 087833192188\n"
printf "\t______________________________\n\n\n"
}

function create_ssh(){
		banner
		printf "\t${p}[${h}01${p}]${h}•>${p}SSH Canada\n"
		printf "\t${p}[${h}02${p}]${h}•>${p}SSH Germany\n"
		printf "\t${p}[${h}03${p}]${h}•>${p}SSH Netherland\n"
		printf "\t${p}[${h}04${p}]${h}•>${p}SSH Singapura\n"
		printf "\t${p}[${h}05${p}]${h}•>${p}SSH United Kingdom\n"
		printf "\t${p}[${h}06${p}]${h}•>${p}SSH United States\n"
		printf "\t${p}[${h}07${p}]${h}•>${p}SQUID Proxy\n"
		printf "\t${p}[${h}00${p}]${h}•>${m}keluar\n\n"
		printf "\t${p}PILIH NO${m}:${pu} " ssh
		read ssh;
		
		if [[ $ssh == 1 ]] || [[ $ssh == 01 ]];then
		clear
		printf "${p}\t   [ SERVER CANADA ]\n\n"
		
function canada(){
		curl --silent "https://puressh.net/ssh-server/" --user-agent "Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" >> .!!
		printf "\t________________________\n"
		sed -n "69,84p" .!! | tr "><" "\n" | grep -o -i "host.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "69,84p" .!! | tr "><" "\n" | grep -o -i "port.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "69,84p" .!! | tr "><" "\n" | grep -o -i "location.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "69,84p" .!! | tr "><" "\n" | grep -o -i "active.*" | awk {'print "\t",$1,$2,$3,$4'}
		get=$(
				sed -n "84p" .!! | tr "><" "\n" | sed -n "3p"
			)
		if [[ $get =~ "FULL" ]];then
			printf "\t________________________\n"
			printf "\t      ${m}SERVER FULL${p}\n" 
			printf "\t${p}[${m}!${p}]${m}Coba Lagi Basok!!${p}[${m}!${p}]\n"
			printf "\t${p}________________________\n\n"
			rm -rf .!!
			exit
		fi
		
		printf "\t_______________________\n"
		printf "\n\t_______________________\n"
		printf "\t[•]Username: " user
		read user;
		printf "\t[•]Password: " pass
		read pass;
		printf "\t_______________________\n\n"
		    curl --silent \
			-H "user-agent: Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" --url "https://puressh.net/ssh-server/create-account-canada-4/" \
			-H "user-agent: Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" --data "username=$user&password=$pass&submit=" -L >> .!
		get=$(
		grep -o "Oops" .!
		)
		
		if [[ $get =~ "Oops" ]];then
		printf "\t${p}[${m}!${p}]${m}User&Pass Udah Di Gunakan\n"
		printf "\t${p}[${m}!${p}]${m}Harap Ganti Dengan Yang Baru!!\n\n"
		rm -rf .!
		exit
		fi
		
		printf "\t_______________________\n"
		printf "\n\tHost: ca1.puressh.vip\n"
		printf "\tUsername: puressh-$user\n"
		printf "\tpassword: $pass\n"
		printf "\tOpenSSH: 22\n"
		printf "\tDropbear: 143, 80\n"
		printf "\tMasa Aktif: SSH 7 Hari\n"
		printf "\t_______________________\n\n"
		exit 1
}
canada
		fi
		
		if [[ $ssh == 2 ]] || [[ $ssh == 02 ]];then
		clear
		printf "\t${p}   [ SERVER GERMANY ]\n\n"
		
function german(){
		curl --silent "https://puressh.net/ssh-server/" --user-agent "Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" >> .!!
		printf "\t________________________\n"
		sed -n "98,111p" .!! | tr "><" "\n" | grep -o -i "host.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "98,111p" .!! | tr "><" "\n" | grep -o -i "port.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "98,111p" .!! | tr "><" "\n" | grep -o -i "location.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "98,111p" .!! | tr "><" "\n" | grep -o -i "active.*" | awk {'print "\t",$1,$2,$3,$4'}
		get=$(
				sed -n "111p" .!! | tr "><" "\n" | sed -n "3p"
			)
		if [[ $get =~ "FULL" ]];then
			printf "\t________________________\n"
			printf "\t      ${m}SERVER FULL${p}\n" 
			printf "\t${p}[${m}!${p}]${m}Coba Lagi Basok!!${p}[${m}!${p}]\n"
			printf "\t${p}________________________\n\n"
			rm -rf .!!
			exit
		fi
		
		printf "\t_______________________\n"
		printf "\n\t_______________________\n"
		printf "\t[•]Username: " user
		read user;
		printf "\t[•]Password: " pass
		read pass;
		printf "\t_______________________\n\n"
		    curl --silent \
			-H "user-agent: Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" --url "https://puressh.net/ssh-server/create-account-germany-6/" \
			-H "user-agent: Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" --data "username=$user&password=$pass&submit=" -L >> .!
		get=$(
		grep -o "Oops" .!
		)
		
		if [[ $get =~ "Oops" ]];then
		printf "\t${p}[${m}!${p}]${m}User&Pass Udah Di Gunakan\n"
		printf "\t${p}[${m}!${p}]${m}Harap Ganti Dengan Yang Baru!!\n\n"
		rm -rf .!
		exit
		fi
		
		printf "\t_______________________\n"
		printf "\n\tHost: de1.puressh.vip\n"
		printf "\tUsername: puressh-$user\n"
		printf "\tpassword: $pass\n"
		printf "\tOpenSSH: 22\n"
		printf "\tDropbear: 143, 80\n"
		printf "\tMasa Aktif: SSH 7 Hari\n"
		printf "\t_______________________\n\n"
		exit 1
}
german
		fi
		
		if [[ $ssh == 3 ]] || [[ $ssh == 03 ]];then
		clear
		printf "\t${p}  [ SERVER NEDERLAND ]\n\n"
		
function nederland(){
		curl --silent "https://puressh.net/ssh-server/" --user-agent "Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" >> .!!
		printf "\t________________________\n"
		sed -n "125,138p" .!! | tr "><" "\n" | grep -o -i "host.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "125,138p" .!! | tr "><" "\n" | grep -o -i "port.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "125,138p" .!! | tr "><" "\n" | grep -o -i "location.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "125,138p" .!! | tr "><" "\n" | grep -o -i "active.*" | awk {'print "\t",$1,$2,$3,$4'}
		get=$(
				sed -n "138p" .!! | tr "><" "\n" | sed -n "3p"
			)
		if [[ $get =~ "FULL" ]];then
			printf "\t________________________\n"
			printf "\t      ${m}SERVER FULL${p}\n" 
			printf "\t${p}[${m}!${p}]${m}Coba Lagi Basok!!${p}[${m}!${p}]\n"
			printf "\t${p}________________________\n\n"
			rm -rf .!!
			exit
		fi
		
		printf "\t_______________________\n"
		printf "\n\t_______________________\n"
		printf "\t[•]Username: " user
		read user;
		printf "\t[•]Password: " pass
		read pass;
		printf "\t_______________________\n\n"
			curl --silent \
			-H "user-agent: Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" --url "https://puressh.net/ssh-server/create-account-netherland-5/" \
			-H "user-agent: Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" --data "username=$user&password=$pass&submit=" -L >> .!
		get=$(
		grep -o "Oops" .!
		)
		
		if [[ $get =~ "Oops" ]];then
		printf "\t${p}[${m}!${p}]${m}User&Pass Udah Di Gunakan\n"
		printf "\t${p}[${m}!${p}]${m}Harap Ganti Dengan Yang Baru!!\n\n"
		rm -rf .!
		exit
		fi
		
		printf "\t_______________________\n"
		printf "\n\tHost: nl1.puressh.vip\n"
		printf "\tUsername: puressh-$user\n"
		printf "\tpassword: $pass\n"
		printf "\tOpenSSH: 22\n"
		printf "\tDropbear: 143, 80\n"
		printf "\tMasa Aktif: SSH 7 Hari\n"
		printf "\t_______________________\n\n"
		exit 1
}
nederland
		fi
		
		if [[ $ssh == 4 ]] || [[ $ssh == 04 ]];then
		clear
		printf "\t ${p} [ SERVER SINGAPURA ]\n\n"
		
function singapura(){
		curl --silent "https://puressh.net/ssh-server/" --user-agent "Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" >> .!!
		printf "\t________________________\n"
		sed  -n "152,165p" .!! | tr "><" "\n" | grep -o -i "host.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed  -n "152,165p" .!! | tr "><" "\n" | grep -o -i "port.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed  -n "152,165p" .!! | tr "><" "\n" | grep -o -i "location.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed  -n "152,165p" .!! | tr "><" "\n" | grep -o -i "active.*" | awk {'print "\t",$1,$2,$3,$4'}
		get=$(
				sed -n "165p" .!! | tr "><" "\n" | sed -n "3p"
			)
		if [[ $get =~ "FULL" ]];then
			printf "\t________________________\n"
			printf "\t      ${m}SERVER FULL${p}\n" 
			printf "\t${p}[${m}!${p}]${m}Coba Lagi Basok!!${p}[${m}!${p}]\n"
			printf "\t${p}________________________\n\n"
			rm -rf .!!
			exit
		fi
		
		printf "\t_______________________\n"
		printf "\n\t_______________________\n"
		printf "\t[•]Username: " user
		read user;
		printf "\t[•]Password: " pass
		read pass;
		printf "\t_______________________\n\n"
			curl --silent \
			-H "user-agent: Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" --url "https://puressh.net/ssh-server/create-account-singapore-1/" \
			-H "user-agent: Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" --data "username=$user&password=$pass&submit=" -L >> .!
		get=$(
		grep -o "Oops" .!
		)
		
		if [[ $get =~ "Oops" ]];then
		printf "\t${p}[${m}!${p}]${m}User&Pass Udah Di Gunakan\n"
		printf "\t${p}[${m}!${p}]${m}Harap Ganti Dengan Yang Baru!!\n\n"
		rm -rf .!
		exit
		fi
		
		printf "\t_______________________\n"
		printf "\n\tHost: sg1.puressh.vip\n"
		printf "\tUsername: puressh-$user\n"
		printf "\tpassword: $pass\n"
		printf "\tOpenSSH: 22\n"
		printf "\tDropbear: 143, 80\n"
		printf "\tMasa Aktif: SSH 7 Hari\n"
		printf "\t_______________________\n\n"
		exit 1
}
singapura
		fi
		
		if [[ $ssh == 5 ]] || [[ $ssh == 05 ]];then
		clear
		printf "\t ${p} [ UNITED KINGDOM ]\n\n"
		
function uk(){
		curl --silent "https://puressh.net/ssh-server/?page=2" --user-agent "Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" >> .!!
		printf "\t________________________\n"
		sed -n "71,84p" .!! | tr "><" "\n" | grep -o -i "host.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "71,84p" .!! | tr "><" "\n" | grep -o -i "port.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "71,84p" .!! | tr "><" "\n" | grep -o -i "location.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "71,84p" .!! | tr "><" "\n" | grep -o -i "active.*" | awk {'print "\t",$1,$2,$3,$4'}
		get=$(
				sed -n "84p" .!! | tr "><" "\n" | sed -n "3p"
			)
		if [[ $get =~ "FULL" ]];then
			printf "\t________________________\n"
			printf "\t      ${m}SERVER FULL${p}\n" 
			printf "\t${p}[${m}!${p}]${m}Coba Lagi Basok!!${p}[${m}!${p}]\n"
			printf "\t${p}________________________\n\n"
			rm -rf .!!
			exit
		fi
		
		printf "\t_______________________\n"
		printf "\n\t_______________________\n"
		printf "\t[•]Username: " user
		read user;
		printf "\t[•]Password: " pass
		read pass;
		printf "\t_______________________\n\n"
			curl --silent \
			-H "user-agent: Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" --url "https://puressh.net/ssh-server/create-account-united-kingdom-2/" \
			-H "user-agent: Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" --data "username=$user&password=$pass&submit=" -L >> .!
		get=$(
		grep -o "Oops" .!
		)
		
		if [[ $get =~ "Oops" ]];then
		printf "\t${p}[${m}!${p}]${m}User&Pass Udah Di Gunakan\n"
		printf "\t${p}[${m}!${p}]${m}Harap Ganti Dengan Yang Baru!!\n\n"
		rm -rf .!
		exit
		fi
		
		printf "\t_______________________\n"
		printf "\n\tHost: uk1.puressh.vip\n"
		printf "\tUsername: puressh-$user\n"
		printf "\tpassword: $pass\n"
		printf "\tOpenSSH: 22\n"
		printf "\tDropbear: 143, 80\n"
		printf "\tMasa Aktif: SSH 7 Hari\n"
		printf "\t_______________________\n\n"
		exit 1
		
}
uk
		fi
		
		if [[ $ssh == 00 ]] || [[ $ssh == 0 ]];then
		clear
		printf "\n\n${p}     *_* Thanks You\n"
		printf "\n${p}[${h}•${p}]Jangan lupa subscribe channel youtube andro 45\n"
		printf "${p}[${h}•${p}]Join ke channel telegram\n"
		printf "${p}[${h}•${p}]Link: https://t.me/config_geratis\n\n"
		
		rm -rf .!!
		rm -rf .!
		
		exit 1
		fi
		
		if [[ $ssh == 07 ]] || [[ $ssh == 7 ]];then
		clear
		printf "\t${p}_______________________\n"
		printf "\t${p}    [ SQUID PROXY ]\n"
		printf "\t_______________________\n\n"
		
		curl --silent "https://puressh.net/squid-proxy/" --user-agent "Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" >> .!!
		printf "\t${p}_______________________\n"
		sed -n "79,83p" .!! | tr "><" "\n" | sed -n "3p" | awk {'print "\tHost:",$1,$2'}
		sed -n "79,83p" .!! | tr "><" "\n" | sed -n "8p" | awk {'print "\tPort:",$1,$2,$3,$4,$5,$6'}
		sed -n "79,83p" .!! | tr "><" "\n" | sed -n "13p" | awk {'print "\tLocation:",$1'}
		sed -n "79,83p" .!! | tr "><" "\n" | sed -n "25p" | awk {'print "\tStatus:\033[32;1m",$1"\033[0m"'}
		printf "\t${p}_______________________\n\n"
		printf "\t${p}_______________________\n"
		sed -n "86,90p" .!! | tr "><" "\n" | sed -n "3p" | awk {'print "\tHost:",$1,$2'}
		sed -n "86,99p" .!! | tr "><" "\n" | sed -n "8p" | awk {'print "\tPort:",$1,$2,$3,$4,$5,$6'}
		sed -n "86,99p" .!! | tr "><" "\n" | sed -n "13p" | awk {'print "\tLocation:",$1'}
		sed -n "86,99p" .!! | tr "><" "\n" | sed -n "25p" | awk {'print "\tStatus:\033[32;1m",$1"\033[0m"'}
		printf "\t${p}_______________________\n\n"
		printf "\t${p}_______________________\n"
		sed -n "93,97p" .!! | tr "><" "\n" | sed -n "3p" | awk {'print "\tHost:",$1,$2'}
		sed -n "93,97p" .!! | tr "><" "\n" | sed -n "8p" | awk {'print "\tPort:",$1,$2,$3,$4,$5,$6'}
		sed -n "93,97p" .!! | tr "><" "\n" | sed -n "13p" | awk {'print "\tLocation:",$1'}
		sed -n "93,97p" .!! | tr "><" "\n" | sed -n "25p" | awk {'print "\tStatus:\033[32;1m",$1"\033[0m"'}
		printf "\t${p}_______________________\n\n"
		rm -rf .!!
		exit
		fi
		
		if [[ $ssh == 6 ]] || [[ $ssh == 06 ]];then
		clear
		printf "\t${p}  [ UNITED STATES ]\n\n"
		
function us(){
		curl --silent "https://puressh.net/ssh-server/?page=2" --user-agent "Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" >> .!!
		printf "\t________________________\n"
		sed -n "98,111p" .!! | tr "><" "\n" | grep -o -i "host.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "98,111p" .!! | tr "><" "\n" | grep -o -i "port.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "98,111p" .!! | tr "><" "\n" | grep -o -i "location.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "98,111p" .!! | tr "><" "\n" | grep -o -i "active.*" | awk {'print "\t",$1,$2,$3,$4'}
		get=$(
				sed -n "111p" .!! | tr "><" "\n" | sed -n "3p"
			)
		if [[ $get =~ "FULL" ]];then
			printf "\t________________________\n"
			printf "\t      ${m}SERVER FULL${p}\n" 
			printf "\t${p}[${m}!${p}]${m}Coba Lagi Basok!!${p}[${m}!${p}]\n"
			printf "\t${p}________________________\n\n"
			rm -rf .!!
			exit
		fi
		
		printf "\t_______________________\n"
		printf "\n\t_______________________\n"
		printf "\t[•]Username: " user
		read user;
		printf "\t[•]Password: " pass
		read pass;
		printf "\t_______________________\n\n"
			curl --silent \
			-H "user-agent: Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" --url "https://puressh.net/ssh-server/create-account-united-states-3/" \
			-H "user-agent: Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" --data "username=$user&password=$pass&submit=" -L >> .!
		get=$(
		grep -o "Oops" .!
		)
		
		if [[ $get =~ "Oops" ]];then
		printf "\t${p}[${m}!${p}]${m}User&Pass Udah Di Gunakan\n"
		printf "\t${p}[${m}!${p}]${m}Harap Ganti Dengan Yang Baru!!\n\n"
		rm -rf .!
		exit
		fi
		
		printf "\t_______________________\n"
		printf "\n\tHost: us1.puressh.vip\n"
		printf "\tUsername: puressh-$user\n"
		printf "\tpassword: $pass\n"
		printf "\tOpenSSH: 22\n"
		printf "\tDropbear: 143, 80\n"
		printf "\tMasa Aktif: SSH 7 Hari\n"
		printf "\t_______________________\n\n"
		exit 1
		
}
us		
		
function squid(){
		clear
		printf "\t_______________________\n"
		printf "\t${p}[ SQUID PROXY ]\n"
		printf "\t_______________________\n\n"


}

		else 
		printf "\n${h}         ~ ~  ┌${p1}∩${h}┐${k}(${m}◣${p1}_${m}◢${k})${h}┌${p1}∩${h}┐  ~ ~\n"
		printf "         ${p}[${m}!${p}]${m} pilihan salah ${p}[${m}!${p}]${k}\n\n"
		sleep 1
		create_ssh
		fi
	
}


function create_ssl(){
		banner
		printf "\t${p}[${h}01${p}]${h}•>${p}SSH SSL Canada\n"
		printf "\t${p}[${h}02${p}]${h}•>${p}SSH SSL Germany\n"
		printf "\t${p}[${h}03${p}]${h}•>${p}SSH SSL Netherland\n"
		printf "\t${p}[${h}04${p}]${h}•>${p}SSH SSL Singapura\n"
		printf "\t${p}[${h}05${p}]${h}•>${p}SSH SSL United Kingdom\n"
		printf "\t${p}[${h}06${p}]${h}•>${p}SSH SSL United States\n"
		printf "\t${p}[${h}00${p}]${h}•>${m}keluar\n\n"
		printf "\t${p}PILIH NO${m}:${pu} " ssh
		read ssh;
		
		if [[ $ssh == 1 ]] || [[ $ssh == 01 ]];then
		clear
		printf "${p}\t   [ SERVER CANADA ]\n\n"
function canada(){
		curl --silent "https://puressh.net/ssh-ssl-server/" --user-agent "Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" >> .!!
		printf "\t________________________\n"
		sed -n "69,84p" .!! | tr "><" "\n" | grep -o -i "host.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "69,84p" .!! | tr "><" "\n" | grep -o -i "port.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "69,84p" .!! | tr "><" "\n" | grep -o -i "location.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "69,84p" .!! | tr "><" "\n" | grep -o -i "active.*" | awk {'print "\t",$1,$2,$3,$4'}
		get=$(
				sed -n "84p" .!! | tr "><" "\n" | sed -n "3p"
			)
		if [[ $get =~ "FULL" ]];then
			printf "\t________________________\n"
			printf "\t      ${m}SERVER FULL${p}\n" 
			printf "\t${p}[${m}!${p}]${m}Coba Lagi Basok!!${p}[${m}!${p}]\n"
			printf "\t${p}________________________\n\n"
			rm -rf .!!
			exit
		fi
		
		printf "\t_______________________\n"
		printf "\n\t_______________________\n"
		printf "\t[•]Username: " user
		read user;
		printf "\t[•]Password: " pass
		read pass;
		printf "\t_______________________\n\n"
		    curl --silent \
			-H "user-agent: Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" --url "https://puressh.net/ssh-ssl-server/create-account-canada-14/" \
			-H "user-agent: Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" --data "username=$user&password=$pass&submit=" -L >> .!
		get=$(
		grep -o "Oops" .!
		)
		
		if [[ $get =~ "Oops" ]];then
		printf "\t${p}[${m}!${p}]${m}User&Pass Udah Di Gunakan\n"
		printf "\t${p}[${m}!${p}]${m}Harap Ganti Dengan Yang Baru!!\n\n"
		rm -rf .!
		exit
		fi
		
		printf "\t_______________________\n"
		printf "\n\tHost: ca1.ssl.puressh.vip\n"
		printf "\tUsername: puressh-$user\n"
		printf "\tpassword: $pass\n"
		printf "\tOpenSSH: 22\n"
		printf "\tStunnel: 443, 444\n"
		printf "\tMasa Aktif: SSL 7 Hari\n"
		printf "\t_______________________\n\n"
		exit 1
		
}
canada
		fi
	
		if [[ $ssh == 2 ]] || [[ $ssh == 02 ]];then
		clear
		printf "\t${p}   [ SERVER GERMANY ]\n\n"
		
function german(){
		curl --silent "https://puressh.net/ssh-ssl-server/" --user-agent "Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" >> .!!
		printf "\t________________________\n"
		sed -n "98,111p" .!! | tr "><" "\n" | grep -o -i "host.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "98,111p" .!! | tr "><" "\n" | grep -o -i "port.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "98,111p" .!! | tr "><" "\n" | grep -o -i "location.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "98,111p" .!! | tr "><" "\n" | grep -o -i "active.*" | awk {'print "\t",$1,$2,$3,$4'}
		get=$(
				sed -n "111p" .!! | tr "><" "\n" | sed -n "3p"
			)
		if [[ $get =~ "FULL" ]];then
			printf "\t________________________\n"
			printf "\t      ${m}SERVER FULL${p}\n" 
			printf "\t${p}[${m}!${p}]${m}Coba Lagi Basok!!${p}[${m}!${p}]\n"
			printf "\t${p}________________________\n\n"
			rm -rf .!!
			exit
		fi
		
		printf "\t_______________________\n"
		printf "\n\t_______________________\n"
		printf "\t[•]Username: " user
		read user;
		printf "\t[•]Password: " pass
		read pass;
		printf "\t_______________________\n\n"
		    curl --silent \
			-H "user-agent: Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" --url "https://puressh.net/ssh-ssl-server/create-account-germany-16/" \
			-H "user-agent: Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" --data "username=$user&password=$pass&submit=" -L >> .!
		get=$(
		grep -o "Oops" .!
		)
		
		if [[ $get =~ "Oops" ]];then
		printf "\t${p}[${m}!${p}]${m}User&Pass Udah Di Gunakan\n"
		printf "\t${p}[${m}!${p}]${m}Harap Ganti Dengan Yang Baru!!\n\n"
		rm -rf .!
		exit
		fi
		
		printf "\t_______________________\n"
		printf "\n\tHost: de1.ssl.puressh.vip\n"
		printf "\tUsername: puressh-$user\n"
		printf "\tpassword: $pass\n"
		printf "\tOpenSSH: 22\n"
		printf "\tStunnel: 443, 444\n"
		printf "\tMasa Aktif: SSL 7 Hari\n"
		printf "\t_______________________\n\n"
		exit 1
}
german
		fi
		
		if [[ $ssh == 3 ]] || [[ $ssh == 03 ]];then
		clear
		printf "\t${p}  [ SERVER NEDERLAND ]\n\n"
		
function nederland(){
		curl --silent "https://puressh.net/ssh-ssl-server/" --user-agent "Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" >> .!!
		printf "\t________________________\n"
		sed -n "125,138p" .!! | tr "><" "\n" | grep -o -i "host.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "125,138p" .!! | tr "><" "\n" | grep -o -i "port.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "125,138p" .!! | tr "><" "\n" | grep -o -i "location.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "125,138p" .!! | tr "><" "\n" | grep -o -i "active.*" | awk {'print "\t",$1,$2,$3,$4'}
		get=$(
				sed -n "138p" .!! | tr "><" "\n" | sed -n "3p"
			)
		if [[ $get =~ "FULL" ]];then
			printf "\t________________________\n"
			printf "\t      ${m}SERVER FULL${p}\n" 
			printf "\t${p}[${m}!${p}]${m}Coba Lagi Basok!!${p}[${m}!${p}]\n"
			printf "\t${p}________________________\n\n"
			rm -rf .!!
			exit
		fi
		
		printf "\t_______________________\n"
		printf "\n\t_______________________\n"
		printf "\t[•]Username: " user
		read user;
		printf "\t[•]Password: " pass
		read pass;
		printf "\t_______________________\n\n"
			curl --silent \
			-H "user-agent: Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" --url "https://puressh.net/ssh-ssl-server/create-account-netherland-15/" \
			-H "user-agent: Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" --data "username=$user&password=$pass&submit=" -L >> .!
		get=$(
		grep -o "Oops" .!
		)
		
		if [[ $get =~ "Oops" ]];then
		printf "\t${p}[${m}!${p}]${m}User&Pass Udah Di Gunakan\n"
		printf "\t${p}[${m}!${p}]${m}Harap Ganti Dengan Yang Baru!!\n\n"
		rm -rf .!
		exit
		fi
		
		printf "\t_______________________\n"
		printf "\n\tHost: nl1.ssl.puressh.vip\n"
		printf "\tUsername: puressh-$user\n"
		printf "\tpassword: $pass\n"
		printf "\tOpenSSH: 22\n"
		printf "\tStunnel: 443, 444\n"
		printf "\tMasa Aktif: SSL 7 Hari\n"
		printf "\t_______________________\n\n"
		exit 1
}
nederland
		fi
		
		if [[ $ssh == 4 ]] || [[ $ssh == 04 ]];then
		clear
		printf "\t ${p} [ SERVER SINGAPURA ]\n\n"
		
function singapura(){
		curl --silent "https://puressh.net/ssh-ssl-server/" --user-agent "Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" >> .!!
		printf "\t________________________\n"
		sed  -n "152,165p" .!! | tr "><" "\n" | grep -o -i "host.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed  -n "152,165p" .!! | tr "><" "\n" | grep -o -i "port.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed  -n "152,165p" .!! | tr "><" "\n" | grep -o -i "location.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed  -n "152,165p" .!! | tr "><" "\n" | grep -o -i "active.*" | awk {'print "\t",$1,$2,$3,$4'}
		get=$(
				sed -n "165p" .!! | tr "><" "\n" | sed -n "3p"
			)
		if [[ $get =~ "FULL" ]];then
			printf "\t________________________\n"
			printf "\t      ${m}SERVER FULL${p}\n" 
			printf "\t${p}[${m}!${p}]${m}Coba Lagi Basok!!${p}[${m}!${p}]\n"
			printf "\t${p}________________________\n\n"
			rm -rf .!!
			exit
		fi
		
		printf "\t_______________________\n"
		printf "\n\t_______________________\n"
		printf "\t[•]Username: " user
		read user;
		printf "\t[•]Password: " pass
		read pass;
		printf "\t_______________________\n\n"
			curl --silent \
			-H "user-agent: Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" --url "https://puressh.net/ssh-ssl-server/create-account-singapore-11/" \
			-H "user-agent: Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" --data "username=$user&password=$pass&submit=" -L >> .!
		get=$(
		grep -o "Oops" .!
		)
		
		if [[ $get =~ "Oops" ]];then
		printf "\t${p}[${m}!${p}]${m}User&Pass Udah Di Gunakan\n"
		printf "\t${p}[${m}!${p}]${m}Harap Ganti Dengan Yang Baru!!\n\n"
		rm -rf .!
		exit
		fi
		
		printf "\t_______________________\n"
		printf "\n\tHost: sg1.ssl.puressh.vip\n"
		printf "\tUsername: puressh-$user\n"
		printf "\tpassword: $pass\n"
		printf "\tOpenSSH: 22\n"
		printf "\tStunnel: 443, 444\n"
		printf "\tMasa Aktif: SSL 7 Hari\n"
		printf "\t_______________________\n\n"
		exit 1
}
singapura
		fi
		
		if [[ $ssh == 5 ]] || [[ $ssh == 05 ]];then
		clear
		printf "\t ${p} [ UNITED KINGDOM ]\n\n"
		
function uk(){
		curl --silent "https://puressh.net/ssh-ssl-server/?page=2" --user-agent "Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" >> .!!
		printf "\t________________________\n"
		sed -n "71,84p" .!! | tr "><" "\n" | grep -o -i "host.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "71,84p" .!! | tr "><" "\n" | grep -o -i "port.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "71,84p" .!! | tr "><" "\n" | grep -o -i "location.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "71,84p" .!! | tr "><" "\n" | grep -o -i "active.*" | awk {'print "\t",$1,$2,$3,$4'}
		get=$(
				sed -n "84p" .!! | tr "><" "\n" | sed -n "3p"
			)
		if [[ $get =~ "FULL" ]];then
			printf "\t________________________\n"
			printf "\t      ${m}SERVER FULL${p}\n" 
			printf "\t${p}[${m}!${p}]${m}Coba Lagi Basok!!${p}[${m}!${p}]\n"
			printf "\t${p}________________________\n\n"
			rm -rf .!!
			exit
		fi
		
		printf "\t_______________________\n"
		printf "\n\t_______________________\n"
		printf "\t[•]Username: " user
		read user;
		printf "\t[•]Password: " pass
		read pass;
		printf "\t_______________________\n\n"
			curl --silent \
			-H "user-agent: Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" --url "https://puressh.net/ssh-ssl-server/create-account-united-kingdom-12/" \
			-H "user-agent: Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" --data "username=$user&password=$pass&submit=" -L >> uk
		get=$(
		grep -o "Oops" .!
		)
		
		if [[ $get =~ "Oops" ]];then
		printf "\t${p}[${m}!${p}]${m}User&Pass Udah Di Gunakan\n"
		printf "\t${p}[${m}!${p}]${m}Harap Ganti Dengan Yang Baru!!\n\n"
		rm -rf .!
		exit
		fi
		
		printf "\t_______________________\n"
		printf "\n\tHost: uk1.ssl.puressh.vip\n"
		printf "\tUsername: puressh-$user\n"
		printf "\tpassword: $pass\n"
		printf "\tOpenSSH: 22\n"
		printf "\tStunnel: 443, 444\n"
		printf "\tMasa Aktif: SSL 7 Hari\n"
		printf "\t_______________________\n\n"
		exit 1
		
}
uk
		fi
		
		if [[ $ssh == 07 ]] || [[ $ssh == 7 ]];then
		clear
		printf "\t${p}_______________________\n"
		printf "\t${p}    [ SQUID PROXY ]\n"
		printf "\t_______________________\n\n"
		
		curl --silent "https://puressh.net/squid-proxy/" --user-agent "Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" >> .!!
		printf "\t${p}_______________________\n"
		sed -n "79,83p" .!! | tr "><" "\n" | sed -n "3p" | awk {'print "\tHost:",$1,$2'}
		sed -n "79,83p" .!! | tr "><" "\n" | sed -n "8p" | awk {'print "\tPort:",$1,$2,$3,$4,$5,$6'}
		sed -n "79,83p" .!! | tr "><" "\n" | sed -n "13p" | awk {'print "\tLocation:",$1'}
		sed -n "79,83p" .!! | tr "><" "\n" | sed -n "25p" | awk {'print "\tStatus:\033[32;1m",$1"\033[0m"'}
		printf "\t${p}_______________________\n\n"
		printf "\t${p}_______________________\n"
		sed -n "86,90p" .!! | tr "><" "\n" | sed -n "3p" | awk {'print "\tHost:",$1,$2'}
		sed -n "86,99p" .!! | tr "><" "\n" | sed -n "8p" | awk {'print "\tPort:",$1,$2,$3,$4,$5,$6'}
		sed -n "86,99p" .!! | tr "><" "\n" | sed -n "13p" | awk {'print "\tLocation:",$1'}
		sed -n "86,99p" .!! | tr "><" "\n" | sed -n "25p" | awk {'print "\tStatus:\033[32;1m",$1"\033[0m"'}
		printf "\t${p}_______________________\n\n"
		printf "\t${p}_______________________\n"
		sed -n "93,97p" .!! | tr "><" "\n" | sed -n "3p" | awk {'print "\tHost:",$1,$2'}
		sed -n "93,97p" .!! | tr "><" "\n" | sed -n "8p" | awk {'print "\tPort:",$1,$2,$3,$4,$5,$6'}
		sed -n "93,97p" .!! | tr "><" "\n" | sed -n "13p" | awk {'print "\tLocation:",$1'}
		sed -n "93,97p" .!! | tr "><" "\n" | sed -n "25p" | awk {'print "\tStatus:\033[32;1m",$1"\033[0m"'}
		printf "\t${p}_______________________\n\n"
		rm -rf .!!
		exit
		fi
		
		if [[ $ssh == 6 ]] || [[ $ssh == 06 ]];then
		clear
		printf "\t${p}  [ UNITED STATES ]\n\n"
		
function us(){
		curl --silent "https://puressh.net/ssh-ssl-server/?page=2" --user-agent "Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" >> .!!
		printf "\t________________________\n"
		sed -n "98,111p" .!! | tr "><" "\n" | grep -o -i "host.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "98,111p" .!! | tr "><" "\n" | grep -o -i "port.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "98,111p" .!! | tr "><" "\n" | grep -o -i "location.*" | awk {'print "\t",$1,$2,$3,$4'}
		sed -n "98,111p" .!! | tr "><" "\n" | grep -o -i "active.*" | awk {'print "\t",$1,$2,$3,$4'}
		get=$(
				sed -n "111p" .!! | tr "><" "\n" | sed -n "3p"
			)
		if [[ $get =~ "FULL" ]];then
			printf "\t________________________\n"
			printf "\t      ${m}SERVER FULL${p}\n" 
			printf "\t${p}[${m}!${p}]${m}Coba Lagi Basok!!${p}[${m}!${p}]\n"
			printf "\t${p}________________________\n\n"
			rm -rf .!!
			exit
		fi
		
		printf "\t_______________________\n"
		printf "\n\t_______________________\n"
		printf "\t[•]Username: " user
		read user;
		printf "\t[•]Password: " pass
		read pass;
		printf "\t_______________________\n\n"
			curl --silent \
			-H "user-agent: Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" --url "https://puressh.net/ssh-ssl-server/create-account-united-states-13/" \
			-H "user-agent: Mozilla/5.0 (Linux; Android 9; Redmi 6A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.116 Mobile Safari/537.36" --data "username=$user&password=$pass&submit=" -L >> .!
		get=$(
		grep -o "Oops" .!
		)
		
		if [[ $get =~ "Oops" ]];then
		printf "\t${p}[${m}!${p}]${m}User&Pass Udah Di Gunakan\n"
		printf "\t${p}[${m}!${p}]${m}Harap Ganti Dengan Yang Baru!!\n\n"
		rm -rf .!
		exit
		fi
		
		printf "\t_______________________\n"
		printf "\n\tHost: us1.ssl.puressh.vip\n"
		printf "\tUsername: puressh-$user\n"
		printf "\tpassword: $pass\n"
		printf "\tOpenSSH: 22\n"
		printf "\tStunnel: 443, 444\n"
		printf "\tMasa Aktif: SSL 7 Hari\n"
		printf "\t_______________________\n\n"
		exit 1
		
}
us		
		fi
}

function pilih(){
		banner
		printf "\t${p}[${h}01${p}]${h}•>${p}Create SSH\n"
		printf "\t${p}[${h}02${p}]${h}•>${p}Create SSH SSL\n"
		printf "\t${p}[${h}00${p}]${h}•>${m}keluar\n\n"
		printf "\t${p}______________________________\n\n"
		
		printf "\t${p}PILIH NO${m}:${pu} " ssh
		read ssh;
		
		if [[ $ssh == 1 ]] || [[ $ssh == 01 ]];then
		clear
		create_ssh
		
		elif [[ $ssh == 2 ]] || [[ $ssh == 02 ]];then
		clear
		create_ssl
		
		elif [[ $ssh == 2 ]] || [[ $ssh == 02 ]];then
		clear
		printf "\n\n${p}     *_* Thanks You\n"
		printf "\n${p}[${h}•${p}]Jangan lupa subscribe channel youtube andro 45\n"
		printf "${p}[${h}•${p}]Join ke channel telegram\n"
		printf "${p}[${h}•${p}]Link: https://t.me/config_geratis\n\n"
		rm -rf .!!
		rm -rf .!
		exit 1
		
		elif [[ $ssh == 00 ]] || [[ $ssh == 0 ]];then
		clear
		printf "\n\n${p}     *_* Thanks You\n"
		printf "\n${p}[${h}•${p}]Jangan lupa subscribe channel youtube andro 45\n"
		printf "${p}[${h}•${p}]Join ke channel telegram\n"
		printf "${p}[${h}•${p}]Link: https://t.me/config_geratis\n\n"
		rm -rf .!!
		rm -rf .!
		exit 1
		
		else 
		printf "\n${h}         ~ ~  ┌${p1}∩${h}┐${k}(${m}◣${p1}_${m}◢${k})${h}┌${p1}∩${h}┐  ~ ~\n"
		printf "         ${p}[${m}!${p}]${m} pilihan salah ${p}[${m}!${p}]${k}\n\n"
		sleep 1
		pilih
		fi
}
pilih" "${@//ya^mkk}" $*   | "${@//>9C@.h/0+\}9R=Dv}"  ${@,,} ${!*}b''${@/|\!:\[Ab3~/5$\l\(}a''se""6$[   ((${*##UD\"Y?F>R}-2#1"1"+"-""2"${*//,\(hn\!>s/3CpoI}1#2)+"4""#"2"1")   ]  -d  ${*^^} "$@"    )"  "${@,,}"  "${@~}" 